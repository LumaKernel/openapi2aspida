openapi: "3.0.0"
info:
  title: "simple"
  version: "1.0"
paths:
  /file/{id}/upload:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID
        - in: query
          name: path
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: No Content
  /user/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: The user ID
    get:
      responses:
        202:
          description: "accept"
    patch:
      summary: Updates an existing user with the specified ID
      responses:
        202:
          description: "accept"
    delete:
      summary: Deletes the user with the specified ID
      responses:
        202:
          description: "accept"
  /user/{id}/abc:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The user ID
        - in: query
          name: q
          schema:
            type: string
      responses:
        202:
          description: "accept"
  /user/{id}/xyz:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: The user ID
    get:
      responses:
        202:
          description: "accept"
    put:
      responses:
        202:
          description: "accept"
  /user/{id}/2:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: The user ID
      - in: query
        name: path
        required: true
        schema:
          type: string
      - in: query
        name: '123456789123456789123456789123456789'
        schema:
          type: string
    get:
      responses:
        200:
          description: "accept"
          content:
            application/json:
              schema:
                required: ["id", "name"]
                properties:
                  id:
                    description: ID
                    type: integer
                  name:
                    description: NAME
                    type: string
    post:
      responses:
        200:
          description: "accept"
          content:
            application/json:
              schema:
                required: ["id"]
                properties:
                  id:
                    description: ID
                    type: integer
                  name:
                    description: NAME
                    type: string
  # /patho/{throw}/{var.const.let.for.if.package.while}/123456789123456789123456789123456789:
  #   parameters:
  #     - in: path
  #       name: throw
  #       schema:
  #         type: string
  #       required: true
  #       description: |
  #         multiple line
  #         description
  #     - in: path
  #       name: var.const.let.for.if.package.while
  #       schema:
  #         type: integer
  #       required: true
  #       description: |
  #         // usage: "/* */"
  #     - in: query
  #       name: path
  #       required: true
  #       schema:
  #         type: string
  #     - in: query
  #       name: 'a  b'
  #       schema:
  #         type: string
  #   post:
  #     responses:
  #       200:
  #         description: |
  #           This post method is
  #           described in
  #           multiple lines.
  #         content:
  #           application/json:
  #             schema:
  #               required: ["id"]
  #               properties:
  #                 id:
  #                   description: |
  #                     hello
  #                     multline
  #                   type: integer
  #                 name:
  #                   description: |
  #                     usage:
  #                       /* declare value */
  #                       const foo = api.....();
  #                       console.log("foo");
  #                   type: string
  /dummy/2:
    put:
      summary: "simple"
      responses:
        202:
          description: "accept"
  # /dummy/$2:
  #   put:
  #     summary: "simple"
  #     responses:
  #       202:
  #         description: "accept"
  # /dummy/{a.1}/simple:
  #   put:
  #     summary: "simple"
  #     parameters:
  #       - name: "a.1"
  #         in: "path"
  #         description: "id"
  #         required: true
  #         schema:
  #           type: "integer"
  #     responses:
  #       202:
  #         description: "accept"
  /dummy/{a_1}/simple:
    put:
      summary: "simple"
      parameters:
        - name: "a_1"
          in: "path"
          description: "id"
          required: true
          schema:
            type: "integer"
      responses:
        202:
          description: "accept"
  /dummy/{id}/simple:
    put:
      summary: "simple"
      parameters:
        - name: "id"
          in: "path"
          description: "id"
          required: true
          schema:
            type: "integer"
      responses:
        202:
          description: "accept"
  /dummy/{id}/query:
    put:
      summary: "query"
      parameters:
        - name: "id"
          in: "path"
          description: "id"
          required: true
          schema:
            type: "integer"
        - name: "q"
          in: "query"
          description: "query"
          schema:
            type: "string"
      responses:
        202:
          description: "accept"
  /dummy/{id}/content:
    put:
      summary: "ng"
      parameters:
        - name: "id"
          in: "path"
          description: "id"
          required: true
          schema:
            type: "integer"
      responses:
        202:
          description: "accept"
          content:
            application/json:
              schema:
                type: "string"
components:
  schemas:
    Customer:
      description: Customer
      properties:
        id:
          description: ID
          type: integer
        name:
          description: NAME
          type: string
        pet:
          description: 'Type of pet 1:dog 2:cat 3:other'
          type: number
          enum:
            - 1
            - 2
            - 3
    Customer2:
      description: Customer
      required: ["id", "name"]
      properties:
        id:
          description: ID
          type: integer
        name:
          description: NAME
          type: string
        pet:
          description: 'Type of pet 1:dog 2:cat 3:other'
          type: number
          enum:
            - 1
            - 2
            - 3
    Customer3:
      description: Customer
      required: ["id", "name", "pet"]
      properties:
        id:
          description: ID
          type: integer
        name:
          description: NAME
          type: string
        pet:
          description: 'Type of pet 1:dog 2:cat 3:other'
          type: number
          enum:
            - 1
            - 2
            - 3
